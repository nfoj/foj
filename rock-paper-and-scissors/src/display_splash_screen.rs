use crossterm::{
    cursor::MoveTo,
    event::{self, Event, KeyCode, KeyEventKind},
    execute,
    style::Print,
    terminal::{Clear, ClearType},
};
use std::io::{Write, stdout};
use std::thread::sleep;
use std::time::Duration;

// Funções para as telas

pub fn display_splash_screen_a() -> Result<(), Box<dyn std::error::Error>> {
    let mut stdout = stdout();
    execute!(stdout, Clear(ClearType::All), MoveTo(0, 1))?;

    let lines = [
        "",
        r"          #####################                                               ",
        r"        # ## ############### ##     # ####################################### ",
        r"        # ## ############### ##    ## ####################################### ",
        r"       ## ## ############### ##   ### ####                               #### ",
        r"       ## ## #   ########### ##  #### ####  > acesse:                    #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ##########      ## ##### ####                               #### ",
        r"      ### ## ########## .::. ## ##### ####                               #### ",
        r"      ### ## ########## :::: ## ##### ####                               #### ",
        r"      ### ## ##########  `'  ## ##### ####                               #### ",
        r"      ### #####################  #### ####                               #### ",
        r"      ### #####################   ### ####                               #### ",
        r"      ### #   #  #  #  ########    ## ####################################### ",
        r"      ### #####################.    # ####################################### ",
        r"      ### ##################### \_  # ### #############################  ##   ",
        r"      ### #####################  \   __##### #############################    ",
        r"      ### #####################-. \  \  # ################################    ",
        r"      ### #####################  \ \   \         `\____________\       \      ",
        r"      ### #####################   \ .   \_______________________________\     ",
        r"      ### #####################    \ '.  \|_____________________________|    ",
        r"       ## #####################     \  '-.___                                  ",
        r"       #  ##################### /~~~~        ~----------------.__              ",
        r"       .---------------------------------------------------.     ~---.          ",
        r"       \ \______\ __________________________________________\--------.---------.     ",
        r"       :'  _   _ _ _ _  _ _ _ _  _ _ _ _   _ _ _           `\         \                 ",
        r"       ::\ ,\_\,\_\_\_\_\\_\_\_\_\\_\_\_\_\,\_\_\_\           \      .## ## .        ",
        r"       |::\  -_-_-_-_-_-_-_-_-_-_-_-_-_-___  -_-_-_   _ _ _ _  \    ## #   # \       ",
        r"       |_::\ ,\_\_\_\_\_\_\_\_\_\_\_\_\_\___\,\_\_\_\,\_\_\_\_\ \    ##       \      ",
        r"          `:\ ,\__\_\_\_\_\_\_\_\_\_\_\_\_\  \,\_\_\_\,\_\_\_\ \ \    ##       \     ",
        r"           `:\ ,\__\_\_\_\_\_\_\_\_\_\_\_\____\    _   ,\_\_\_\_\ \    ###     .     ",
        r"             :\ ,\____\_\_\_\_\_\_\_\_\_\_\____\  ,\_\ _,\_\_\_\ \ \    '#####'      ",
        r"              :\ ,\__\\__\_______________\__\\__\,\_\_\_\,\___\_\_\ \                ",
        r"               `\  --  -- --------------- --  --   - - -   --- - -  /._____________. ",
        "                 `--------------------------------------------------'                 ",
        "",
    ];

    for line in lines {
        execute!(stdout, Print(line), Print("\n\r"))?;
    }

    stdout.flush()?;
    sleep(Duration::from_secs(2));
    execute!(stdout, Clear(ClearType::All), MoveTo(0, 1))?;

    let lines = [
        "",
        r"          #####################                                               ",
        r"        # ## ############### ##     # ####################################### ",
        r"        # ## ############### ##    ## ####################################### ",
        r"       ## ## ############### ##   ### ####                               #### ",
        r"       ## ## #   ########### ##  #### ####  > acesse:                    #### ",
        r"      ### ## ############### ## ##### ####  > foj.dev.br                 #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ############### ## ##### ####                               #### ",
        r"      ### ## ##########      ## ##### ####                               #### ",
        r"      ### ## ########## .::. ## ##### ####                               #### ",
        r"      ### ## ########## :::: ## ##### ####                               #### ",
        r"      ### ## ##########  `'  ## ##### ####                               #### ",
        r"      ### #####################  #### ####                               #### ",
        r"      ### #####################   ### ####                               #### ",
        r"      ### #   #  #  #  ########    ## ####################################### ",
        r"      ### #####################.    # ####################################### ",
        r"      ### ##################### \_  # ### #############################  ##   ",
        r"      ### #####################  \   __##### #############################    ",
        r"      ### #####################-. \  \  # ################################    ",
        r"      ### #####################  \ \   \         `\____________\       \      ",
        r"      ### #####################   \ .   \_______________________________\     ",
        r"      ### #####################    \ '.  \|_____________________________|    ",
        r"       ## #####################     \  '-.___                                  ",
        r"       #  ##################### /~~~~        ~----------------.__              ",
        r"       .---------------------------------------------------.     ~---.          ",
        r"       \ \______\ __________________________________________\--------.---------.     ",
        r"       :'  _   _ _ _ _  _ _ _ _  _ _ _ _   _ _ _           `\         \                 ",
        r"       ::\ ,\_\,\_\_\_\_\\_\_\_\_\\_\_\_\_\,\_\_\_\           \      .## ## .        ",
        r"       |::\  -_-_-_-_-_-_-_-_-_-_-_-_-_-___  -_-_-_   _ _ _ _  \    ## #   # \       ",
        r"       |_::\ ,\_\_\_\_\_\_\_\_\_\_\_\_\_\___\,\_\_\_\,\_\_\_\_\ \    ##       \      ",
        r"          `:\ ,\__\_\_\_\_\_\_\_\_\_\_\_\_\  \,\_\_\_\,\_\_\_\ \ \    ##       \     ",
        r"           `:\ ,\__\_\_\_\_\_\_\_\_\_\_\_\____\    _   ,\_\_\_\_\ \    ###     .     ",
        r"             :\ ,\____\_\_\_\_\_\_\_\_\_\_\____\  ,\_\ _,\_\_\_\ \ \    '#####'      ",
        r"              :\ ,\__\\__\_______________\__\\__\,\_\_\_\,\___\_\_\ \                ",
        r"               `\  --  -- --------------- --  --   - - -   --- - -  /._____________. ",
        "                 `--------------------------------------------------'                 ",
        "",
    ];

    for line in lines {
        execute!(stdout, Print(line), Print("\n\r"))?;
    }

    stdout.flush()?;
    sleep(Duration::from_secs(3));
    Ok(())
}

pub fn display_splash_screen_b() -> Result<(), Box<dyn std::error::Error>> {
    let mut stdout = stdout();
    execute!(stdout, Clear(ClearType::All), MoveTo(0, 1))?;

    let lines = [
        "",
        "                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠀⣠⡴⠖⠒⠲⠶⢤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡴⠖⠒⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⢀⡾⠁⠀⣀⠔⠁⠀⠀⠈⠙⠷⣤⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⠋⠀⠀⠀⢀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⣠⠞⠛⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠈⢿⡀⢠⡶⠒⠳⠶⣄⠀⠀⠀⠀⠀⣴⠟⠁⠀⠀⠀⣰⠏⠀⢀⣤⣤⣄⡀⠀⠀⠀⠀",
        "                ⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⠛⠛⠃⠸⡇⠈⣇⠸⡇⠀⠀⠀⠘⣇⠀⠀⣠⡾⠁⠀⠀⠀⢀⣾⣣⡴⠚⠉⠀⠀⠈⠹⡆⠀⠀⠀",
        "                ⠀⠀⣹⡷⠤⠤⠤⠄⠀⠀⠀⠀⢠⣤⡤⠶⠖⠛⠀⣿⠀⣿⠀⢻⡄⠀⠀⠀⢻⣠⡾⠋⠀⠀⠀⠀⣠⡾⠋⠁⠀⠀⠀⠀⢀⣠⡾⠃⠀⠀⠀",
        "                ⠀⠀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡤⠖⠋⢀⣿⣠⠏⠀⠀⣿⠀⠀⠀⠘⠉⠀⠀⠀⠀⠀⡰⠋⠀⠀⠀⠀⠀⣠⠶⠋⠁⠀⠀⠀⠀⠀",
        "                ⠀⠀⢿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠁⠀⠀⠠⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠁⠀⠀⠀⢀⣴⡿⠥⠶⠖⠛⠛⢶⡄⠀⠀",
        "                ⠀⠀⠀⠉⢿⡋⠉⠉⠁⠀⠀⠀⠀⠀⢀⣠⠾⠋⠀⠀⠀⠀⢀⣰⡇⠀⠀⢀⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⢀⣠⠼⠃⠀⠀",
        "                ⠀⠀⠀⠀⠈⠛⠶⠦⠤⠤⠶⠶⠛⠋⠁⠀⠀⠀⠀⠀⠀⣿⠉⣇⠀⡴⠟⠁⣠⡾⠃⠀⠀⠀⠀⠀⠈⠀⠀⠀⣀⣤⠶⠛⠉⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⢀⣠⣤⣀⣠⣤⠶⠶⠒⠶⠶⣤⣀⠀⠀⠀⢻⡄⠹⣦⠀⠶⠛⢁⣠⡴⠀⠀⠀⠀⠀⠀⣠⡶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⢀⡴⠋⣠⠞⠋⠁⠀⠀⠀⠀⠙⣄⠀⠙⢷⡀⠀⠀⠻⣄⠈⢷⣄⠈⠉⠁⠀⠀⠀⢀⣠⡴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⢀⡾⠁⣴⠋⠰⣤⣄⡀⠀⠀⠀⠀⠈⠳⢤⣼⣇⣀⣀⠀⠉⠳⢤⣭⡿⠒⠶⠶⠒⠚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⢸⠃⢰⠇⠰⢦⣄⡈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠛⠛⠓⠲⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠸⣧⣿⠀⠻⣤⡈⠛⠳⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠈⠹⣆⠀⠈⠛⠂⠀⠀⠀⠀⠀⠀⠈⠐⠒⠒⠶⣶⣶⠶⠤⠤⣤⣠⡼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⣀⠀⠀⠀⠀⠐⠲⠤⣤⣀⡀⠀⠀⠀⠀⠀⠉⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠶⠤⠤⠤⠶⠞⠋⠉⠙⠳⢦⣄⡀⠀⠀⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠳⠦⠾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "",
    ];

    for line in lines {
        execute!(stdout, Print(line), Print("\n\r"))?;
    }
    stdout.flush()?;

    // Deixa a tela visível por 2 segundos antes de limpar
    sleep(Duration::from_secs(2));
    Ok(())
}

pub fn display_splash_screen_c() -> Result<(), Box<dyn std::error::Error>> {
    let mut stdout = stdout();
    execute!(stdout, Clear(ClearType::All))?;
    let title_logo = [
        "                            ▄████████  ▄██████▄    ▄████████   ▄█   ▄█▄",
        "                            ███    ███ ███    ███ ███    ███  ███ ▄███▀",
        "                            ███    ███ ███    ███ ███    █▀   ███▐██▀",
        "                           ▄███▄▄▄▄██▀ ███    ███ ███         █████▀",
        "                          ▀▀███▀▀▀▀▀   ███    ███ ███        ▀█████▄",
        "                          ▀███████████ ███    ███ ███    █▄   ███▐██▄",
        "                            ███    ███ ███    ███ ███    ███  ███ ▀███▄",
        "                            ███    ███  ▀██████▀  ████████▀   ███   ▀█▀",
        "",
        "                  ▄███████▄    ▄████████    ▄███████▄     ▄████████    ▄████████",
        "                  ███    ███   ███    ███   ███    ███   ███    ███   ███    ███",
        "                  ███    ███   ███    ███   ███    ███   ███    █▀    ███    ███",
        "                  ███    ███   ███    ███   ███    ███  ▄███▄▄▄      ▄███▄▄▄▄██▀",
        "                ▀█████████▀  ▀███████████ ▀█████████▀  ▀▀███▀▀▀     ▀▀███▀▀▀▀▀",
        "                  ███          ███    ███   ███          ███    █▄  ▀███████████",
        "                  ███          ███    ███   ███          ███    ███   ███    ███",
        "                 ▄████▀        ███    █▀   ▄████▀        ██████████   ███    ███",
        "",
        "     ▄████████  ▄████████  ▄█     ▄████████   ▄████████   ▄██████▄     ▄████████    ▄████████",
        "    ███    ███ ███    ███ ███    ███    ███  ███    ███  ███    ███   ███    ███   ███    ███",
        "    ███    █▀  ███    █▀  ███▌   ███    █▀   ███    █▀   ███    ███   ███    ███   ███    █▀",
        "    ███        ███        ███▌   ███         ███         ███    ███  ▄███▄▄▄▄██▀   ███",
        "  ▀███████████ ███        ███▌ ▀███████████ ▀███████████ ███    ███ ▀▀███▀▀▀▀▀    ▀███████████",
        "           ███ ███    █▄  ███           ███          ███ ███    ███ ▀███████████           ███",
        "      ▄█   ███ ███    ███ ███     ▄█    ███    ▄█    ███ ███    ███   ███    ███     ▄█    ███",
        "   ▄████████▀  ████████▀  █▀    ▄████████▀   ▄████████▀  ▀██████▀    ███    ███   ▄████████▀   ",
        "                                                                                               ",
        "",
    ];

    for line in title_logo {
        execute!(stdout, Print(line), Print("\n\r"))?;
    }
    execute!(
        stdout,
        Print("\n"),
        Print("                              > PRESS ANY KEY START GAME"),
        Print("\n\r")
    )?;
    stdout.flush()?;

    // Espera por qualquer tecla
    event::read()?;
    Ok(())
}
